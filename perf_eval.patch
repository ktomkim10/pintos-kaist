diff --git a/Makefile b/Makefile
index 86cdcb5..50a4e9e 100644
--- a/Makefile
+++ b/Makefile
@@ -31,7 +31,7 @@ cscope:: cscope.files
 	cscope -b -q -k
 
 archive:: clean
-ifeq ($(shell echo ${TEAM} | egrep "^[1-9]{1}[0-9]{0,2}$$"),)
+ifeq ($(shell echo ${TEAM} | egrep "^[1-2]{1}[0-9]{0,7}$$"),)
 	@echo "Check your team number: $(TEAM)"
 else
 	@tar -zcf /tmp/${TAR_PATH} . && \
diff --git a/Makefile.userprog b/Makefile.userprog
index feb30ff..5cc4c1d 100644
--- a/Makefile.userprog
+++ b/Makefile.userprog
@@ -15,11 +15,13 @@ lib_SRC += lib/stdio.c			# I/O library.
 lib_SRC += lib/stdlib.c			# Utility functions.
 lib_SRC += lib/string.c			# String functions.
 lib_SRC += lib/arithmetic.c
+lib_SRC += lib/stats.c
 
 # User level only library code.
 lib/user_SRC  = lib/user/debug.c	# Debug helpers.
 lib/user_SRC += lib/user/syscall.c	# System calls.
 lib/user_SRC += lib/user/console.c	# Console code.
+lib/user_SRC += lib/user/stats.c
 
 LIB_OBJ = $(patsubst %.c,%.o,$(patsubst %.S,%.o,$(lib_SRC) $(lib/user_SRC)))
 LIB_DEP = $(patsubst %.o,%.d,$(LIB_OBJ))
diff --git a/devices/timer.c b/devices/timer.c
index 910d607..914079b 100644
--- a/devices/timer.c
+++ b/devices/timer.c
@@ -127,6 +127,10 @@ timer_interrupt (struct intr_frame *args UNUSED) {
 	ticks++;
 	thread_tick ();
 
+#ifdef USERPROG
+	update_stat ();
+#endif
+
 	if (thread_mlfqs) {
 		increase_curr_recent_cpu();
 		if (ticks % TIMER_FREQ == 0){
diff --git a/include/lib/kernel/stats.h b/include/lib/kernel/stats.h
new file mode 100644
index 0000000..bd43580
--- /dev/null
+++ b/include/lib/kernel/stats.h
@@ -0,0 +1,9 @@
+#ifndef __LIB_KERNEL_STATS_H
+#define __LIB_KERNSL_STATS_H
+
+void init_stat_region (void);
+void mmap_stat_region (uint64_t *);
+void munmap_stat_region (uint64_t *);
+void update_stat (void);
+
+#endif
\ No newline at end of file
diff --git a/include/lib/stats.h b/include/lib/stats.h
new file mode 100644
index 0000000..5687a61
--- /dev/null
+++ b/include/lib/stats.h
@@ -0,0 +1,12 @@
+#ifndef __LIB_STATS_H
+#define __LIB_STATS_H
+
+#define VA_STAT_REGION (0x4000)
+
+unsigned long __gettime (void);
+int __memstat (void);
+
+unsigned long gettime (void);
+int memstat (void);
+
+#endif
\ No newline at end of file
diff --git a/include/threads/palloc.h b/include/threads/palloc.h
index 4ed170f..8f4eee5 100644
--- a/include/threads/palloc.h
+++ b/include/threads/palloc.h
@@ -20,4 +20,7 @@ void *palloc_get_multiple (enum palloc_flags, size_t page_cnt);
 void palloc_free_page (void *);
 void palloc_free_multiple (void *, size_t page_cnt);
 
+int memstat_get(void);
+int memstat_get_peak(void);
+
 #endif /* threads/palloc.h */
diff --git a/lib/kernel/stats.c b/lib/kernel/stats.c
new file mode 100644
index 0000000..eb88be4
--- /dev/null
+++ b/lib/kernel/stats.c
@@ -0,0 +1,34 @@
+#include <stats.h>
+
+#include "../stats.h"
+#include "devices/timer.h"
+#include "threads/palloc.h"
+#include "threads/thread.h"
+
+static void *stat_region = NULL;
+
+unsigned long __gettime (void) {
+	return timer_ticks();
+}
+
+int __memstat (void) {
+	return memstat_get_peak();
+}
+
+void init_stat_region (void) {
+    stat_region = palloc_get_page(PAL_ASSERT | PAL_ZERO);
+}
+
+void mmap_stat_region (uint64_t *pml4) {
+    ASSERT (pml4_set_page(pml4, VA_STAT_REGION, stat_region, false));
+}
+
+void munmap_stat_region (uint64_t *pml4) {
+    pml4_clear_page(pml4, VA_STAT_REGION);
+}
+
+void update_stat (void) {
+    *((unsigned long *) stat_region) = __gettime();
+    *((int *) stat_region + 8) = __memstat();
+}
+
diff --git a/lib/kernel/targets.mk b/lib/kernel/targets.mk
index 405ec72..a5b9fa3 100644
--- a/lib/kernel/targets.mk
+++ b/lib/kernel/targets.mk
@@ -3,3 +3,4 @@ lib/kernel_SRC += lib/kernel/list.c	# Doubly-linked lists.
 lib/kernel_SRC += lib/kernel/bitmap.c	# Bitmaps.
 lib/kernel_SRC += lib/kernel/hash.c	# Hash tables.
 lib/kernel_SRC += lib/kernel/console.c	# printf(), putchar().
+lib/kernel_SRC += lib/kernel/stats.c
diff --git a/lib/stats.c b/lib/stats.c
new file mode 100644
index 0000000..c826e98
--- /dev/null
+++ b/lib/stats.c
@@ -0,0 +1,9 @@
+#include <stats.h>
+
+unsigned long gettime (void) {
+	return __gettime();
+}
+
+int memstat (void) {
+	return __memstat();
+}
\ No newline at end of file
diff --git a/lib/targets.mk b/lib/targets.mk
index 8fd5680..e35c65c 100644
--- a/lib/targets.mk
+++ b/lib/targets.mk
@@ -4,3 +4,4 @@ lib_SRC += lib/stdio.c			# I/O library.
 lib_SRC += lib/stdlib.c			# Utility functions.
 lib_SRC += lib/string.c			# String functions.
 lib_SRC += lib/arithmetic.c
+lib_SRC += lib/stats.c
diff --git a/lib/user/stats.c b/lib/user/stats.c
new file mode 100644
index 0000000..998ce22
--- /dev/null
+++ b/lib/user/stats.c
@@ -0,0 +1,9 @@
+#include <stats.h>
+
+unsigned long __gettime (void) {
+	return *((unsigned long *) VA_STAT_REGION);
+}
+
+int __memstat (void) {
+	return *((int *) VA_STAT_REGION + 8);
+}
\ No newline at end of file
diff --git a/tests/Make.tests b/tests/Make.tests
index 595cf7b..f0db1cf 100644
--- a/tests/Make.tests
+++ b/tests/Make.tests
@@ -4,11 +4,13 @@ include $(patsubst %,$(SRCDIR)/%/Make.tests,$(TEST_SUBDIRS))
 
 PROGS = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_PROGS))
 TESTS = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_TESTS))
+PERF_TESTS = $(foreach subdir,$(PERF_TEST_SUBDIRS),$($(subdir)_TESTS))
 EXTRA_GRADES = $(foreach subdir,$(TEST_SUBDIRS),$($(subdir)_EXTRA_GRADES))
 
 OUTPUTS = $(addsuffix .output,$(TESTS) $(EXTRA_GRADES))
 ERRORS = $(addsuffix .errors,$(TESTS) $(EXTRA_GRADES))
 RESULTS = $(addsuffix .result,$(TESTS) $(EXTRA_GRADES))
+PERF_RESULTS = $(addsuffix .result,$(PERF_TESTS))
 
 ifdef PROGS
 include ../../Makefile.userprog
@@ -35,6 +37,19 @@ check:: results
 		exit 1;							  \
 	fi
 
+gradescope:: measure
+	$(SRCDIR)/tests/make-gradescope $< $(BASELINE_FILE) $(REFERENCE_FILE) $(PERF_GRADING_FILE) | tee $@
+
+measure: $(RESULTS)
+	@for d in $(PERF_TESTS); do			\
+		egrep "Time elapsed" $$d.output; 						\
+	done > $@
+
+perf: $(PERF_RESULTS)
+	@for d in $(PERF_TESTS); do			\
+		egrep "Time elapsed" $$d.output; 						\
+	done > $@
+
 results: $(RESULTS)
 	@for d in $(TESTS) $(EXTRA_GRADES); do			\
 		if echo PASS | cmp -s $$d.result -; then	\
diff --git a/tests/make-gradescope b/tests/make-gradescope
new file mode 100755
index 0000000..c05f6b5
--- /dev/null
+++ b/tests/make-gradescope
@@ -0,0 +1,102 @@
+#! /usr/bin/perl
+
+use strict;
+use warnings;
+
+@ARGV == 4 || die;
+my ($measure_file, $baseline_file, $reference_file, $grading_file) = @ARGV;
+
+# Read statistics from $results_file.
+open (MEASURE, '<', $measure_file) || die "$measure_file: open: $!\n";
+my (%time_stat, %memory_stat);
+while (<MEASURE>) {
+	if (/\(([^)]+)\) Time elapsed : (\d+) ms, Memory used : (\d+) frames/) {
+    	my ($test, $time, $memory) = ($1, $2, $3);
+	    $time_stat{$test} = $time;
+		$memory_stat{$test} = $memory;
+	}
+}
+close MEASURE;
+
+# Read statistics from $baseline_file.
+open (MEASURE_BASE, '<', $baseline_file) || die "$baseline_file: open: $!\n";
+my (%time_stat_base, %memory_stat_base);
+while (<MEASURE_BASE>) {
+	if (/\(([^)]+)\) Time elapsed : (\d+) ms, Memory used : (\d+) frames/) {
+    	my ($test, $time, $memory) = ($1, $2, $3);
+	    $time_stat_base{$test} = $time;
+		$memory_stat_base{$test} = $memory;
+	}
+}
+close MEASURE_BASE;
+
+# Read statistics from $reference_file.
+open (MEASURE_REF, '<', $reference_file) || die "$reference_file: open: $!\n";
+my (%time_stat_ref, %memory_stat_ref);
+while (<MEASURE_REF>) {
+	if (/\(([^)]+)\) Time elapsed : (\d+) ms, Memory used : (\d+) frames/) {
+    	my ($test, $time, $memory) = ($1, $2, $3);
+	    $time_stat_ref{$test} = $time;
+		$memory_stat_ref{$test} = $memory;
+	}
+}
+close MEASURE_REF;
+
+# Calculate scores from $grading_file
+open (GRADING, '<', $grading_file) || die "$grading_file: open: $!\n";
+my $total_score = 0;
+my (%time_scores, %memory_scores);
+while (<GRADING>) {
+	if (/\(([^)]+)\)\tT\tf\t(\d+)\th\t(\d+)\tM\tf\t(\d+)\th\t(\d+)/) {
+		my ($test, $tf, $th, $mf, $mh) = ($1, $2, $3, $4, $5);
+
+		$time_scores{$test} = 0;
+		$memory_scores{$test} = 0;
+
+		if ($time_stat{$test} <= $tf) {
+			$time_scores{$test} = 10;
+		} elsif ($time_stat{$test} <= $th) {
+			$time_scores{$test} = 5;
+		}
+		if ($memory_stat{$test} <= $mf) {
+			$memory_scores{$test} = 10;
+		} elsif ($memory_stat{$test} <= $mh) {
+			$memory_scores{$test} = 5;
+		}
+
+		$total_score += $time_scores{$test} + $memory_scores{$test};
+	}
+}
+close GRADING;
+
+# Print scores
+print "SCORE\n";
+print "=====\n";
+foreach my $name (keys (%time_stat)) {
+	my $time_pct = $time_stat{$name} / $time_stat_base{$name} * 100;
+	my $memory_pct = $memory_stat{$name} / $memory_stat_base{$name} * 100;
+
+	printf ("%d/10 (%.2f%%)\t- $name-TIME\n", $time_scores{$name}, $time_pct);
+	printf ("%d/10 (%.2f%%)\t- $name-MEM\n", $memory_scores{$name}, $memory_pct);
+}
+print "Total score: $total_score\n";
+
+# Calculate avg values
+my $sum_time = 0;
+my $sum_memory = 0;
+my $count = 0;
+
+foreach my $name (keys (%time_stat)) {
+	$sum_time += $time_stat{$name} / $time_stat_base{$name} * 100;
+	$sum_memory += $memory_stat{$name} / $memory_stat_base{$name} * 100;	
+	$count++;
+}
+
+my $average_time = $sum_time / $count;
+my $average_memory = $sum_memory / $count;
+
+# Print avg values
+print "\nLEADERBOARD STAT\n";
+print "================\n";
+printf ("Average Execution Time: %.2f %%\n", $average_time);
+printf ("Average Memory Usage: %.2f %%\n", $average_memory);
diff --git a/tests/vm/Make.tests b/tests/vm/Make.tests
index 2bea90a..f005c53 100644
--- a/tests/vm/Make.tests
+++ b/tests/vm/Make.tests
@@ -8,7 +8,8 @@ mmap-close mmap-unmap mmap-overlap mmap-twice mmap-write mmap-ro mmap-exit	\
 mmap-shuffle mmap-bad-fd mmap-clean mmap-inherit mmap-misalign		\
 mmap-null mmap-over-code mmap-over-data mmap-over-stk mmap-remove	\
 mmap-zero mmap-bad-fd2 mmap-bad-fd3 mmap-zero-len mmap-off mmap-bad-off \
-mmap-kernel lazy-file lazy-anon swap-file swap-anon swap-iter swap-fork)
+mmap-kernel swap-file swap-anon swap-iter swap-fork)
+#lazy tests(lazy-file, lazy-anon) are excluded for prefetch implementation
 
 tests/vm_PROGS = $(tests/vm_TESTS) $(addprefix tests/vm/,child-linear	\
 child-sort child-qsort child-qsort-mm child-mm-wrt child-inherit child-swap)
@@ -119,20 +120,17 @@ tests/vm/page-shuffle.output: MEMORY = 20
 tests/vm/mmap-shuffle.output: TIMEOUT = 600
 tests/vm/mmap-shuffle.output: MEMORY = 20
 tests/vm/page-merge-seq.output: TIMEOUT = 600
-tests/vm/page-merge-par.output: SWAP_DISK = 10
 tests/vm/page-merge-par.output: TIMEOUT = 600
-tests/vm/page-merge-stk.output: SWAP_DISK = 10
-tests/vm/page-merge-mm.output: SWAP_DISK = 10
 tests/vm/lazy-file.output: TIMEOUT = 600
 tests/vm/swap-anon.output: SWAP_DISK = 30
-tests/vm/swap-anon.output: TIMEOUT = 180
-tests/vm/swap-anon.output: MEMORY = 10
+tests/vm/swap-anon.output: TIMEOUT = 600
+tests/vm/swap-anon.output: MEMORY = 15
 tests/vm/swap-file.output: SWAP_DISK = 10
-tests/vm/swap-file.output: TIMEOUT = 180
-tests/vm/swap-file.output: MEMORY = 8
+tests/vm/swap-file.output: TIMEOUT = 600
+tests/vm/swap-file.output: MEMORY = 10
 tests/vm/swap-iter.output: SWAP_DISK = 50
-tests/vm/swap-iter.output: TIMEOUT = 180
-tests/vm/swap-iter.output: MEMORY = 10
+tests/vm/swap-iter.output: TIMEOUT = 600
+tests/vm/swap-iter.output: MEMORY = 15
 tests/vm/swap-fork.output: SWAP_DISK = 200
 tests/vm/swap-fork.output: MEMORY = 40
 tests/vm/swap-fork.output: TIMEOUT = 600
diff --git a/tests/vm/perf/Baseline b/tests/vm/perf/Baseline
new file mode 100644
index 0000000..4eb36f7
--- /dev/null
+++ b/tests/vm/perf/Baseline
@@ -0,0 +1,5 @@
+(perf-pf-simple) Time elapsed : 27920 ms, Memory used : 4104 frames
+(perf-pf-reverse) Time elapsed : 37330 ms, Memory used : 4104 frames
+(perf-pf-sparse) Time elapsed : 7190 ms, Memory used : 1032 frames
+(perf-cow-anon) Time elapsed : 47640 ms, Memory used : 8208 frames
+(perf-cow-mmap) Time elapsed : 40430 ms, Memory used : 1972 frames
diff --git a/tests/vm/perf/Grading b/tests/vm/perf/Grading
new file mode 100644
index 0000000..954f604
--- /dev/null
+++ b/tests/vm/perf/Grading
@@ -0,0 +1,5 @@
+(perf-pf-simple)	T	f	4620	h	5390	M	f	4310	h	4925
+(perf-pf-reverse)	T	f	4692	h	5474	M	f	4310	h	4925
+(perf-pf-sparse)	T	f	1200	h	1400	M	f	1084	h	1239
+(perf-cow-anon)	T	f	4728	h	5516	M	f	4326	h	4944
+(perf-cow-mmap)	T	f	1608	h	1876	M	f	1053	h	1203
\ No newline at end of file
diff --git a/tests/vm/perf/Make.tests b/tests/vm/perf/Make.tests
new file mode 100644
index 0000000..48d4057
--- /dev/null
+++ b/tests/vm/perf/Make.tests
@@ -0,0 +1,28 @@
+# -*- makefile -*-
+
+tests/vm/perf_TESTS = $(addprefix tests/vm/perf/perf-, \
+pf-simple pf-reverse \
+pf-sparse \
+cow-anon cow-mmap)
+
+tests/vm/perf_PROGS = $(tests/vm/perf_TESTS)
+
+tests/vm/perf/perf-pf-simple_SRC = tests/vm/perf/perf-pf-simple.c tests/lib.c tests/main.c
+tests/vm/perf/perf-pf-reverse_SRC = tests/vm/perf/perf-pf-reverse.c tests/lib.c tests/main.c
+tests/vm/perf/perf-pf-sparse_SRC = tests/vm/perf/perf-pf-sparse.c tests/lib.c tests/main.c
+tests/vm/perf/perf-cow-anon_SRC = tests/vm/perf/perf-cow-anon.c tests/lib.c tests/main.c
+tests/vm/perf/perf-cow-mmap_SRC = tests/vm/perf/perf-cow-mmap.c tests/lib.c tests/main.c
+
+tests/vm/perf/perf-cow-mmap_PUTFILES = tests/vm/large.txt
+ 
+tests/vm/perf/perf-pf-simple.output: TIMEOUT = 600
+tests/vm/perf/perf-pf-simple.output: MEMORY = 300
+tests/vm/perf/perf-pf-reverse.output: TIMEOUT = 600
+tests/vm/perf/perf-pf-reverse.output: MEMORY = 300
+tests/vm/perf/perf-pf-sparse.output: TIMEOUT = 600
+tests/vm/perf/perf-pf-sparse.output: MEMORY = 300
+
+tests/vm/perf/perf-cow-anon.output: TIMEOUT = 600
+tests/vm/perf/perf-cow-anon.output: MEMORY = 300
+tests/vm/perf/perf-cow-mmap.output: TIMEOUT = 600
+tests/vm/perf/perf-cow-mmap.output: MEMORY = 300
diff --git a/tests/vm/perf/Reference b/tests/vm/perf/Reference
new file mode 100644
index 0000000..404429a
--- /dev/null
+++ b/tests/vm/perf/Reference
@@ -0,0 +1,5 @@
+(perf-pf-simple) Time elapsed : 3850 ms, Memory used : 4104 frames
+(perf-pf-reverse) Time elapsed : 3910 ms, Memory used : 4104 frames
+(perf-pf-sparse) Time elapsed : 1000 ms, Memory used : 1032 frames
+(perf-cow-anon) Time elapsed : 3940 ms, Memory used : 4120 frames
+(perf-cow-mmap) Time elapsed : 1340 ms, Memory used : 1002 frames
diff --git a/tests/vm/perf/perf-cow-anon.c b/tests/vm/perf/perf-cow-anon.c
new file mode 100644
index 0000000..8104951
--- /dev/null
+++ b/tests/vm/perf/perf-cow-anon.c
@@ -0,0 +1,64 @@
+/* Read from anonymous pages in a forked child multiple times
+   and measure performance. */
+
+#include <string.h>
+#include <syscall.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stats.h>
+#include "tests/lib.h"
+#include "tests/main.h"
+
+#define PAGE_SHIFT 12
+#define PAGE_SIZE (1 << PAGE_SHIFT) // 4KB
+#define ONE_MB (1 << 20) // 1MB
+
+#define CHILD_CNT 8
+#define CHUNK_SIZE (16 * ONE_MB)
+#define PAGE_COUNT (CHUNK_SIZE / PAGE_SIZE)
+
+static char big_chunks[CHUNK_SIZE];
+
+void
+test_main (void) {
+    pid_t child[CHILD_CNT];
+    size_t i, j;
+    char *mem;
+    unsigned long start, end;
+
+    for (i = 0; i < PAGE_COUNT; i++) {
+        mem = (big_chunks + (i * PAGE_SIZE));
+        *mem = (char)i;
+    }
+
+    start = gettime();
+
+    for (i = 0; i < CHILD_CNT; i++) {
+        child[i] = fork("child");
+        if (child[i] == 0) {
+            for (j = 0; j < PAGE_COUNT; j++) {
+                mem = (big_chunks + (j * PAGE_SIZE));
+                if ((char)j != *mem)
+		            fail ("data is inconsistent");
+            }
+            return;
+        } 
+        else {
+            if (wait (child[i]) != 0) 
+                fail ("child abnormally exited");
+        }
+    }
+
+    end = gettime();
+
+    for (i = 0; i < PAGE_COUNT; i++) {
+        mem = (big_chunks + (i * PAGE_SIZE));
+        if ((char)i != *mem)
+		    fail ("data is inconsistent");
+    }
+
+    msg ("Time elapsed : %ld ms, Memory used : %d frames", (end - start) * 10, memstat());
+    msg ("test done");
+
+    return;
+}
diff --git a/tests/vm/perf/perf-cow-anon.ck b/tests/vm/perf/perf-cow-anon.ck
new file mode 100644
index 0000000..d3de957
--- /dev/null
+++ b/tests/vm/perf/perf-cow-anon.ck
@@ -0,0 +1,13 @@
+# -*- perl -*-
+use strict;
+use warnings;
+use tests::tests;
+
+our ($test);
+my (@output) = read_text_file ("$test.output");
+
+common_checks ("run", @output);
+
+fail "missing 'test done' message\n"
+  if !grep ($_ eq '(perf-cow-anon) test done', @output);
+pass;
diff --git a/tests/vm/perf/perf-cow-mmap.c b/tests/vm/perf/perf-cow-mmap.c
new file mode 100644
index 0000000..81f4144
--- /dev/null
+++ b/tests/vm/perf/perf-cow-mmap.c
@@ -0,0 +1,50 @@
+/* Read from file-backed pages in a forked child multiple times
+   and measure performance. */
+
+#include <string.h>
+#include <syscall.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stats.h>
+#include "tests/lib.h"
+#include "tests/main.h"
+#include "tests/vm/large.inc"
+
+#define CHILD_CNT 8
+
+void
+test_main (void) {
+    pid_t child[CHILD_CNT];
+    size_t i;
+    void *map;
+    char *actual = (char *) 0x10000000;
+    int handle;
+    unsigned long start, end;
+
+	CHECK ((handle = open ("large.txt")) > 1, "open \"large.txt\"");
+	CHECK ((map = mmap (actual, sizeof(large), 0, handle, 0)) != MAP_FAILED, "mmap \"large.txt\"");
+
+    CHECK (memcmp (map, large, strlen(large)) == 0, "check data consistency");
+
+    start = gettime();
+
+    for (i = 0; i < CHILD_CNT; i++) {
+        child[i] = fork("child");
+        if (child[i] == 0) {
+            CHECK (memcmp (map, large, strlen(large)) == 0, "check data consistency");
+            return;
+        } else {
+            if (wait (child[i]) != 0) 
+                fail ("child abnormally exited");
+        }
+    }
+    
+    end = gettime();
+
+    CHECK (memcmp (map, large, strlen(large)) == 0, "check data consistency");
+
+    msg ("Time elapsed : %ld ms, Memory used : %d frames", (end - start) * 10, memstat());
+    msg ("test done");
+
+    return;
+}
diff --git a/tests/vm/perf/perf-cow-mmap.ck b/tests/vm/perf/perf-cow-mmap.ck
new file mode 100644
index 0000000..a398576
--- /dev/null
+++ b/tests/vm/perf/perf-cow-mmap.ck
@@ -0,0 +1,13 @@
+# -*- perl -*-
+use strict;
+use warnings;
+use tests::tests;
+
+our ($test);
+my (@output) = read_text_file ("$test.output");
+
+common_checks ("run", @output);
+
+fail "missing 'test done' message\n"
+  if !grep ($_ eq '(perf-cow-mmap) test done', @output);
+pass;
diff --git a/tests/vm/perf/perf-pf-reverse.c b/tests/vm/perf/perf-pf-reverse.c
new file mode 100644
index 0000000..7b2fe65
--- /dev/null
+++ b/tests/vm/perf/perf-pf-reverse.c
@@ -0,0 +1,50 @@
+/* Checks prefetch implementation */
+/* Reverse scan */
+#include <string.h>
+#include <stdint.h>
+#include <syscall.h>
+#include "tests/lib.h"
+#include "tests/main.h"
+#include <stats.h>
+
+#define PAGE_SHIFT 12
+#define PAGE_SIZE (1 << PAGE_SHIFT)
+#define ONE_MB (1 << 20) // 1MB
+
+#define CHUNK_SIZE (16 * ONE_MB)
+#define PAGE_COUNT (CHUNK_SIZE / PAGE_SIZE)
+
+static char big_chunks[CHUNK_SIZE];
+
+void
+test_main (void) 
+{
+    int i;
+    char *mem;
+    unsigned long start, end;
+    
+    start = gettime();
+
+    for (i = PAGE_COUNT - 1 ; i >= 0 ; i--) {
+        if (!(i % 512))
+            msg ("write sparsely over page %u", i);
+        mem = (big_chunks + (i * PAGE_SIZE));
+        *mem = (char)i;
+    }
+
+    end = gettime();
+
+    for (i = 0 ; i < PAGE_COUNT ; i++) {
+        mem = (big_chunks + (i * PAGE_SIZE));
+        if ((char)i != *mem) {
+		    fail ("data is inconsistent");
+        }
+        if (!(i % 512))
+            msg ("check consistency in page %u", i);
+    }
+    
+    msg ("Time elapsed : %ld ms, Memory used : %d frames", (end - start) * 10, memstat());
+    msg ("test done");
+
+    return;
+}
diff --git a/tests/vm/perf/perf-pf-reverse.ck b/tests/vm/perf/perf-pf-reverse.ck
new file mode 100644
index 0000000..58f02e7
--- /dev/null
+++ b/tests/vm/perf/perf-pf-reverse.ck
@@ -0,0 +1,13 @@
+# -*- perl -*-
+use strict;
+use warnings;
+use tests::tests;
+
+our ($test);
+my (@output) = read_text_file ("$test.output");
+
+common_checks ("run", @output);
+
+fail "missing 'test done' message\n"
+  if !grep ($_ eq '(perf-pf-reverse) test done', @output);
+pass;
diff --git a/tests/vm/perf/perf-pf-simple.c b/tests/vm/perf/perf-pf-simple.c
new file mode 100644
index 0000000..402fd5e
--- /dev/null
+++ b/tests/vm/perf/perf-pf-simple.c
@@ -0,0 +1,51 @@
+/* Checks prefetch implementation */
+/* Simple sequential scan */
+
+#include <string.h>
+#include <stdint.h>
+#include <syscall.h>
+#include "tests/lib.h"
+#include "tests/main.h"
+#include <stats.h>
+
+#define PAGE_SHIFT 12
+#define PAGE_SIZE (1 << PAGE_SHIFT)
+#define ONE_MB (1 << 20) // 1MB
+
+#define CHUNK_SIZE (16 * ONE_MB)
+#define PAGE_COUNT (CHUNK_SIZE / PAGE_SIZE)
+
+static char big_chunks[CHUNK_SIZE];
+
+void
+test_main (void) 
+{
+    size_t i;
+    char *mem;
+    unsigned long start, end;
+    
+    start = gettime();
+
+    for (i = 0 ; i < PAGE_COUNT; i++) {
+        if (!(i % 512))
+            msg ("write sparsely over page %zu", i);
+        mem = (big_chunks + (i * PAGE_SIZE));
+        *mem = (char)i;
+    }
+
+    end = gettime();
+
+    for (i = 0 ; i < PAGE_COUNT; i++) {
+        mem = (big_chunks + (i * PAGE_SIZE));
+        if ((char)i != *mem) {
+		    fail ("data is inconsistent");
+        }
+        if (!(i % 512))
+            msg ("check consistency in page %zu", i);
+    }
+    
+    msg ("Time elapsed : %ld ms, Memory used : %d frames", (end - start) * 10, memstat());
+    msg ("test done");
+
+    return;
+}
diff --git a/tests/vm/perf/perf-pf-simple.ck b/tests/vm/perf/perf-pf-simple.ck
new file mode 100644
index 0000000..2672a6d
--- /dev/null
+++ b/tests/vm/perf/perf-pf-simple.ck
@@ -0,0 +1,12 @@
+# -*- perl -*-
+use strict;
+use warnings;
+use tests::tests;
+our ($test);
+my (@output) = read_text_file ("$test.output");
+
+common_checks ("run", @output);
+
+fail "missing 'test done' message\n"
+  if !grep ($_ eq '(perf-pf-simple) test done', @output);
+pass;
\ No newline at end of file
diff --git a/tests/vm/perf/perf-pf-sparse.c b/tests/vm/perf/perf-pf-sparse.c
new file mode 100644
index 0000000..26c558e
--- /dev/null
+++ b/tests/vm/perf/perf-pf-sparse.c
@@ -0,0 +1,54 @@
+/* Checks prefetch implementation */
+/* Sparse access */
+
+#include <string.h>
+#include <stdint.h>
+#include <syscall.h>
+#include "tests/lib.h"
+#include "tests/main.h"
+#include <stats.h>
+
+#define PAGE_SHIFT 12
+#define PAGE_SIZE (1 << PAGE_SHIFT)
+#define ONE_MB (1 << 20) // 1MB
+
+#define CHUNK_SIZE (64 * ONE_MB)
+#define PAGE_COUNT (CHUNK_SIZE / PAGE_SIZE)
+
+static char big_chunks[CHUNK_SIZE];
+
+void
+test_main (void) 
+{
+    size_t i;
+    char *mem;
+    unsigned long start, end;
+    
+    start = gettime();
+
+    for (i = 0 ; i < PAGE_COUNT ; i++) {
+        if (!(i % 512))
+            msg ("write sparsely over page %zu", i);
+        if (!(i % 16)) {
+            mem = (big_chunks + (i * PAGE_SIZE));
+            *mem = (char)i;
+        }
+    }
+
+    end = gettime();
+
+    for (i = 0 ; i < PAGE_COUNT ; i++) {
+        if (!(i % 16)) {
+            mem = (big_chunks + (i * PAGE_SIZE));
+            if((char)i != *mem)
+                fail ("data is inconsistent");
+	    }
+        if (!(i % 512))
+            msg ("check consistency in page %zu", i);
+    }
+
+    msg ("Time elapsed : %ld ms, Memory used : %d frames", (end - start) * 10, memstat());
+    msg ("test done");
+
+    return;
+}
diff --git a/tests/vm/perf/perf-pf-sparse.ck b/tests/vm/perf/perf-pf-sparse.ck
new file mode 100644
index 0000000..8fe5819
--- /dev/null
+++ b/tests/vm/perf/perf-pf-sparse.ck
@@ -0,0 +1,13 @@
+# -*- perl -*-
+use strict;
+use warnings;
+use tests::tests;
+
+our ($test);
+my (@output) = read_text_file ("$test.output");
+
+common_checks ("run", @output);
+
+fail "missing 'test done' message\n"
+  if !grep ($_ eq '(perf-pf-sparse) test done', @output);
+pass;
\ No newline at end of file
diff --git a/threads/init.c b/threads/init.c
index aae924d..efb34bd 100644
--- a/threads/init.c
+++ b/threads/init.c
@@ -8,6 +8,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <stats.h>
 #include "devices/kbd.h"
 #include "devices/input.h"
 #include "devices/serial.h"
@@ -163,6 +164,10 @@ paging_init (uint64_t mem_end) {
 			*pte = pa | perm;
 	}
 
+#ifdef USERPROG
+	init_stat_region();
+#endif
+
 	// reload cr3
 	pml4_activate(0);
 }
diff --git a/threads/mmu.c b/threads/mmu.c
index a2c71cf..2c4b239 100644
--- a/threads/mmu.c
+++ b/threads/mmu.c
@@ -1,6 +1,7 @@
 #include <stdbool.h>
 #include <stddef.h>
 #include <string.h>
+#include <stats.h>
 #include "threads/init.h"
 #include "threads/pte.h"
 #include "threads/palloc.h"
@@ -95,8 +96,12 @@ pml4e_walk (uint64_t *pml4e, const uint64_t va, int create) {
 uint64_t *
 pml4_create (void) {
 	uint64_t *pml4 = palloc_get_page (0);
-	if (pml4)
+	if (pml4) {
 		memcpy (pml4, base_pml4, PGSIZE);
+#ifdef USERPROG
+		mmap_stat_region(pml4);
+#endif
+	}
 	return pml4;
 }
 
@@ -192,6 +197,10 @@ pml4_destroy (uint64_t *pml4) {
 		return;
 	ASSERT (pml4 != base_pml4);
 
+#ifdef USERPROG
+	munmap_stat_region(pml4);
+#endif
+
 	/* if PML4 (vaddr) >= 1, it's kernel space by define. */
 	uint64_t *pdpe = ptov ((uint64_t *) pml4[0]);
 	if (((uint64_t) pdpe) & PTE_P)
diff --git a/threads/palloc.c b/threads/palloc.c
index f7a3974..2e40716 100644
--- a/threads/palloc.c
+++ b/threads/palloc.c
@@ -43,6 +43,34 @@ init_pool (struct pool *p, void **bm_base, uint64_t start, uint64_t end);
 
 static bool page_from_pool (const struct pool *, void *page);
 
+int memstat_used;
+int memstat_peak;
+struct lock memstat_lock;
+
+static void memstat_init(void) {
+	memstat_used = 0;
+	memstat_peak = 0;
+	lock_init(&memstat_lock);
+}
+
+static void memstat_inc(int cnt) {
+	lock_acquire(&memstat_lock);
+	memstat_used += cnt;
+	if (memstat_used > memstat_peak) {
+		memstat_peak = memstat_used;
+#ifdef USERPROG
+		update_stat ();
+#endif
+	}
+	lock_release(&memstat_lock);
+}
+
+static void memstat_dec(int cnt) {
+	lock_acquire(&memstat_lock);
+	memstat_used -= cnt;
+	lock_release(&memstat_lock);
+}
+
 /* multiboot info */
 struct multiboot_info {
 	uint32_t flags;
@@ -250,6 +278,7 @@ palloc_init (void) {
 	printf ("\text_mem: 0x%llx ~ 0x%llx (Usable: %'llu kB)\n",
 		  ext_mem.start, ext_mem.end, ext_mem.size / 1024);
 	populate_pools (&base_mem, &ext_mem);
+	memstat_init();
 	return ext_mem.end;
 }
 
@@ -281,6 +310,9 @@ palloc_get_multiple (enum palloc_flags flags, size_t page_cnt) {
 			PANIC ("palloc_get: out of pages");
 	}
 
+	if (flags & PAL_USER)
+		memstat_inc (page_cnt);
+
 	return pages;
 }
 
@@ -308,8 +340,10 @@ palloc_free_multiple (void *pages, size_t page_cnt) {
 
 	if (page_from_pool (&kernel_pool, pages))
 		pool = &kernel_pool;
-	else if (page_from_pool (&user_pool, pages))
+	else if (page_from_pool (&user_pool, pages)) {
+		memstat_dec (page_cnt);
 		pool = &user_pool;
+	}
 	else
 		NOT_REACHED ();
 
@@ -356,3 +390,11 @@ page_from_pool (const struct pool *pool, void *page) {
 	size_t end_page = start_page + bitmap_size (pool->used_map);
 	return page_no >= start_page && page_no < end_page;
 }
+
+int memstat_get(void) {
+	return memstat_used;
+}
+
+int memstat_get_peak(void) {
+	return memstat_peak;
+}
diff --git a/userprog/exception.c b/userprog/exception.c
index adbbabb..5acc908 100644
--- a/userprog/exception.c
+++ b/userprog/exception.c
@@ -141,6 +141,9 @@ page_fault (struct intr_frame *f) {
 	user = (f->error_code & PF_U) != 0;
 
 #ifdef VM
+	/* To make page_fault heavier */
+	timer_msleep(6);
+
 	/* For project 3 and later. */
 	if (vm_try_handle_fault (f, fault_addr, user, write, not_present))
 		return;
diff --git a/vm/Make.vars b/vm/Make.vars
index 6285652..b2ff805 100644
--- a/vm/Make.vars
+++ b/vm/Make.vars
@@ -4,6 +4,13 @@ os.dsk: DEFINES = -DUSERPROG -DFILESYS -DVM -DEFILESYS
 KERNEL_SUBDIRS = threads tests/threads tests/threads/mlfqs
 KERNEL_SUBDIRS += devices lib lib/kernel userprog filesys vm
 TEST_SUBDIRS = tests/userprog tests/vm tests/filesys/base tests/threads
-# Grading for extra
-# TEST_SUBDIRS += tests/vm/cow
+# Uncomment for testing performance 
+TEST_SUBDIRS += tests/vm/perf
+PERF_TEST_SUBDIRS = tests/vm/perf
+# Uncomment for testing CoW
+# TEST_SUBDIRS = tests/vm/cow
 GRADING_FILE = $(SRCDIR)/tests/vm/Grading
+PERF_GRADING_FILE = $(SRCDIR)/tests/vm/perf/Grading
+
+BASELINE_FILE = $(SRCDIR)/tests/vm/perf/Baseline
+REFERENCE_FILE = $(SRCDIR)/tests/vm/perf/Reference
